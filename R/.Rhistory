VariaZurich <- read.table("../data/meteoswiss/varia2.csv", header=TRUE, sep=";")
VariaZurich$date_time <- as.POSIXct(as.character(VariaZurich$time), "%Y%m%d%H%M", tz="UTC")
attributes(VariaZurich$date_time)$tzone <- "Europe/Zurich"
VariaZurich <- VariaZurich[!is.na(VariaZurich$visibility_synop),]
VariaZurich <- subset(VariaZurich, select=-c(time))
names(VariaZurich)[names(VariaZurich)=="brightness_lx_sma"] <- "brightness_lx_sma_10min"
raw.long3050 <- merge(raw.long3050, VariaZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
raw.long3050$brightness_lx_sma_10min <- as.numeric(as.character(raw.long3050$brightness_lx_sma_10min))
raw.long3050$visibility_synop <- as.numeric(as.character(raw.long3050$visibility_synop))
raw.long3050$fog <- as.numeric(as.character(raw.long3050$fog))
raw.long3050$clouds <- as.numeric(as.character(raw.long3050$clouds))
rm(VariaZurich)
SunriseZurich <- read.table("SunriseSunset/Zurich_2007-2012.csv", header=TRUE, sep=";")
SunriseZurich <- read.table("../data/sunrise_sunset/Zurich_2007-2012.csv", header=TRUE, sep=";")
SunriseZurich$sunrise_hour <- substr(SunriseZurich$sunrise_min,1,1)
SunriseZurich$sunset_hour <- substr(SunriseZurich$sunset_min,1,2)
SunriseZurich$sunrise_hour <- as.numeric(SunriseZurich$sunrise_hour)
SunriseZurich$sunset_hour <- as.numeric(SunriseZurich$sunset_hour)
SunriseZurich$date <- strptime(as.character(SunriseZurich$Date), "%d.%m.%Y")
SunriseZurich$date <- as.POSIXct(SunriseZurich$date)
SunriseZurich$DST <- as.POSIXlt(SunriseZurich$date)$isdst
SunriseZurich$sunrise <- 0
SunriseZurich$sunrise <- ifelse(SunriseZurich$DST==0, SunriseZurich$sunrise_hour, SunriseZurich$sunrise_hour + 1)
SunriseZurich$sunset <- 0
SunriseZurich$sunset <- ifelse(SunriseZurich$DST==0, SunriseZurich$sunset_hour, SunriseZurich$sunset_hour + 1)
SunriseZurich <- subset(SunriseZurich, select=-c(sunrise_min,sunset_min,sunrise_hour,sunset_hour,Date))
raw.long3050 <- merge(raw.long3050, SunriseZurich, by.x=c("date_"), by.y=c("date"), all.x=TRUE)
raw.long3050$day_night <- 0
raw.long3050$day_night <- ifelse(((raw.long3050$time>=raw.long3050$sunrise) & (raw.long3050$time<=raw.long3050$sunset)), 1, 0)
raw.long3050$day_night2 <- 0
raw.long3050$day_night2 <- ifelse(((raw.long3050$time>raw.long3050$sunrise) & (raw.long3050$time<raw.long3050$sunset)), 1, 0)
rm(SunriseZurich)
PartZurich <- read.table("../data/particulates/particulates_hourly.csv", header=TRUE, sep=";")
PartZurich$date_time <- as.POSIXct(as.character(PartZurich$time), "%d.%m.%Y %H:%M", tz="UTC")
attributes(PartZurich$date_time)$tzone <- "Europe/Zurich"
PartZurich <- subset(PartZurich, select=-c(time))
raw.long3050 <- merge(raw.long3050, PartZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
raw.long3050$part_ZUE <- as.numeric(as.character(raw.long3050$part_ZUE)) # 526 NAs
raw.long3050$part_ZBW <- as.numeric(as.character(raw.long3050$part_ZBW)) # 18163 NAs
raw.long3050$part_ZSS <- as.numeric(as.character(raw.long3050$part_ZSS)) # 1537 NAs
raw.long3050$part_ZSW <- as.numeric(as.character(raw.long3050$part_ZSW)) # 35235 NAs
rm(PartZurich)
SnowZurich <- read.table("../data/meteoswiss/snowdaily.csv", header=TRUE, sep=";")
SnowZurich$date <- strptime(as.character(SnowZurich$time), "%Y%m%d")
SnowZurich$date <- as.POSIXct(SnowZurich$date)
SnowZurich <- subset(SnowZurich, select=-c(time))
raw.long3050 <- merge(raw.long3050, SnowZurich, by.x=c("date_"), by.y=c("date"), all.x=TRUE)
raw.long3050$snowrain <- as.numeric(as.character(raw.long3050$snowrain)) # 73/2174 = 1
raw.long3050$snowblanket <- as.numeric(as.character(raw.long3050$snowblanket))  # 254/2190 = 1
raw.long3050$snowfall <- as.numeric(as.character(raw.long3050$snowfall)) # 216/2176 = 1
rm(SnowZurich)
raw.long3050 <- raw.long3050[which(!is.na(raw.long3050$date_time)),]
head(raw.long3050)
# Project Blind Haste
# Michael Schulte-Mecklenbeck, Emanuel de Bellis
# integrating external data files into processed rawdata
# blank slate
rm(list = ls())
# set working directory %UPDATE%
setwd("BlindHaste/R") #Michael
# load packages
library(dplyr)
library(tidyr)
# disable scientific notation (otherwise transformation of date into character and POSIX doesn't work?!)
#options(scipen=999)
# load data
raw.long3050 <- readRDS('../data/rawlong3050_check.RDS') # same as raw.wide but with one row per speed bracket (233008 rows)
# holidays 2008-2009 ----
### identify public holidays (dates from www.feiertagskalender.ch)
raw.long3050$holiday <- 0
raw.long3050[raw.long3050$date_==as.POSIXct("2008-03-21"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2008-03-24"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2008-03-31"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2008-05-12"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2009-04-13"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2009-05-21"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2009-06-01"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2009-04-10"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2010-05-24"),]$holiday <- 1
### sunshine & precipitation (2007-2013) --------
# resolution = 1 hour
# sum of precipitation  per hour (mm)
# sum of sunshine per hour (min)
# load data
SunRainZurich <- read.table("../data/meteoswiss/sunshine.txt", header=TRUE, sep=",")
# convert into POSIX format and account for time zone difference
SunRainZurich$date_time <- as.POSIXct(as.character(SunRainZurich$time), "%Y%m%d%H", tz="UTC")
attributes(SunRainZurich$date_time)$tzone <- "Europe/Zurich"
# delete unnecessary columns and rename them
SunRainZurich <- subset(SunRainZurich, select=-c(time))
SunRainZurich <- dplyr::rename(SunRainZurich, sunshine = sonnenschein)
SunRainZurich <- dplyr::rename(SunRainZurich, precipitation = niederschlag)
# replace - by NA (coercion Warning is ok - converts <NA> or - into NA)
SunRainZurich$sunshine <- as.numeric(as.character(SunRainZurich$sunshine))
SunRainZurich$precipitation <- as.numeric(as.character(SunRainZurich$precipitation))
# merge the two data frames
raw.long3050 <- merge(raw.long3050, SunRainZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
# remove SunRainZurich as it is merged into raw.long
rm(SunRainZurich)
### brightness (2007-2009) & radiation (2007-2012) --------
# resolution = 1 hour
# load data
BrightZurich <- read.table("../data/meteoswiss/brightness_radiation.csv", header=TRUE, sep=";")
# convert into POSIX format and account for time zone difference
BrightZurich$date_time <- as.POSIXct(as.character(BrightZurich$time), "%Y%m%d%H", tz="UTC")
attributes(BrightZurich$date_time)$tzone <- "Europe/Zurich"
# delete unnecessary columns
BrightZurich <- subset(BrightZurich, select=-c(time))
# merge the two data frames
raw.long3050 <- merge(raw.long3050, BrightZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
# convert to numeric (character conversion first)
raw.long3050$radiation <- as.numeric(as.character(raw.long3050$radiation))
raw.long3050$brightness_mv_sma <- as.numeric(as.character(raw.long3050$brightness_mv_sma))
raw.long3050$brightness_mv_klo <- as.numeric(as.character(raw.long3050$brightness_mv_klo))
raw.long3050$brightness_mv_smaklo <- as.numeric(as.character(raw.long3050$brightness_mv_smaklo))
# conversion from mv to lx
raw.long3050$brightness_lx_sma <- 0
raw.long3050$brightness_lx_sma <- 10^(((raw.long3050$brightness_mv_sma)+245)/100)
raw.long3050$brightness_lx_klo <- 0
raw.long3050$brightness_lx_klo <- 10^(((raw.long3050$brightness_mv_klo)+245)/100)
raw.long3050$brightness_lx_smaklo <- 0
raw.long3050$brightness_lx_smaklo <- 10^(((raw.long3050$brightness_mv_smaklo)+245)/100)
# transform radiation to take log10 later on (which is not possible with zeros);
# 10 because the range of radiation is [-9,1003]
raw.long3050$radiation <- raw.long3050$radiation+10
# remove BrightZurich as it is merged into raw.long
rm(BrightZurich)
### air pressure & temperature (2007-2013) --------
# resolution = 1 hour
# load data
AirTempZurich <- read.table("../data/meteoswiss/pressure.txt", header=TRUE, sep=",")
# convert into POSIX format and account for time zone difference
AirTempZurich$date_time <- as.POSIXct(as.character(AirTempZurich$time), "%Y%m%d%H", tz="UTC")
attributes(AirTempZurich$date_time)$tzone <- "Europe/Zurich"
# delete unnecessary columns and rename them
AirTempZurich <- subset(AirTempZurich, select=-c(time, tre200bn,tre200b0))
AirTempZurich <- rename(AirTempZurich,air_pressure=luftdruck)
# merge the two data frames
raw.long3050 <- merge(raw.long3050, AirTempZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
# convert to num
raw.long3050$air_pressure <- as.numeric(as.character(raw.long3050$air_pressure))
raw.long3050$temp <- as.numeric(as.character(raw.long3050$temp))
# remove SunRainZurich as it is merged into raw.long
rm(AirTempZurich)
# visibility (2007-2013) ----
# resolution = 1 hour
# load data
VisZurich <- read.table("../data/meteoswiss/visibility.csv", header=TRUE, sep=";")
# convert into POSIX format and account for time zone difference
VisZurich$date_time <- as.POSIXct(as.character(VisZurich$time), "%Y%m%d%H", tz="UTC")
attributes(VisZurich$date_time)$tzone <- "Europe/Zurich"
# delete unnecessary columns
VisZurich <- subset(VisZurich, select=-c(time, eye_measure))
# delete rows with visibility=NA to reduce size of the data frame
VisZurich <- VisZurich[!is.na(VisZurich$visibility),]
# merge the two data frames
raw.long3050 <- merge(raw.long3050, VisZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
# convert to num
raw.long3050$visibility <- as.numeric(as.character(raw.long3050$visibility))
# remove VisZurich as it is merged into raw.long
rm(VisZurich)
### varia (2007-2012) --------
# load data
VariaZurich <- read.table("../data/meteoswiss/varia2.csv", header=TRUE, sep=";")
# convert into POSIX format and account for time zone difference
VariaZurich$date_time <- as.POSIXct(as.character(VariaZurich$time), "%Y%m%d%H%M", tz="UTC")
attributes(VariaZurich$date_time)$tzone <- "Europe/Zurich"
# remove rows with NA (data are on 10 minute resolution but measured only every houer)
VariaZurich <- VariaZurich[!is.na(VariaZurich$visibility_synop),]
# delete unnecessary columns
VariaZurich <- subset(VariaZurich, select=-c(time))
# change name of brightness to distinguish from other brightness measures
names(VariaZurich)[names(VariaZurich)=="brightness_lx_sma"] <- "brightness_lx_sma_10min"
# merge the two data frames
raw.long3050 <- merge(raw.long3050, VariaZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
# convert to num
raw.long3050$brightness_lx_sma_10min <- as.numeric(as.character(raw.long3050$brightness_lx_sma_10min))
raw.long3050$visibility_synop <- as.numeric(as.character(raw.long3050$visibility_synop))
raw.long3050$fog <- as.numeric(as.character(raw.long3050$fog))
raw.long3050$clouds <- as.numeric(as.character(raw.long3050$clouds))
# remove VariaZurich as it is merged into raw.long
rm(VariaZurich)
### sunrise-sunset (2007-2009)  --------
# resolution = 1 hour (actually 1 minute)
# load data
SunriseZurich <- read.table("../data/sunrise_sunset/Zurich_2007-2012.csv", header=TRUE, sep=";")
# extract hour from exact time
SunriseZurich$sunrise_hour <- substr(SunriseZurich$sunrise_min,1,1)
SunriseZurich$sunset_hour <- substr(SunriseZurich$sunset_min,1,2)
# convert to numeric
SunriseZurich$sunrise_hour <- as.numeric(SunriseZurich$sunrise_hour)
SunriseZurich$sunset_hour <- as.numeric(SunriseZurich$sunset_hour)
# string to data and bring into same format as raw.long
SunriseZurich$date <- strptime(as.character(SunriseZurich$Date), "%d.%m.%Y")
# convert to POSIXct (not clear why this wasn't needed for brightness!)
SunriseZurich$date <- as.POSIXct(SunriseZurich$date)
# account for daylight saving time (DST)
# create new variable DST stating whether daylight saving time (1) or standard time (0)
SunriseZurich$DST <- as.POSIXlt(SunriseZurich$date)$isdst
# create new variable sunrise/sunset and add one hour if DST=1
SunriseZurich$sunrise <- 0
SunriseZurich$sunrise <- ifelse(SunriseZurich$DST==0, SunriseZurich$sunrise_hour, SunriseZurich$sunrise_hour + 1)
SunriseZurich$sunset <- 0
SunriseZurich$sunset <- ifelse(SunriseZurich$DST==0, SunriseZurich$sunset_hour, SunriseZurich$sunset_hour + 1)
# delete unnecessary columns
SunriseZurich <- subset(SunriseZurich, select=-c(sunrise_min,sunset_min,sunrise_hour,sunset_hour,Date))
# merge the two data frames
raw.long3050 <- merge(raw.long3050, SunriseZurich, by.x=c("date_"), by.y=c("date"), all.x=TRUE)
# create variable indicating whether day (1) or night (0)
raw.long3050$day_night <- 0
raw.long3050$day_night <- ifelse(((raw.long3050$time>=raw.long3050$sunrise) & (raw.long3050$time<=raw.long3050$sunset)), 1, 0)
raw.long3050$day_night2 <- 0
raw.long3050$day_night2 <- ifelse(((raw.long3050$time>raw.long3050$sunrise) & (raw.long3050$time<raw.long3050$sunset)), 1, 0)
# remove SunRainZurich as it is merged into raw.long
rm(SunriseZurich)
### particulates (2007-2012) --------
# resolution = 1 hour
# load data
PartZurich <- read.table("../data/particulates/particulates_hourly.csv", header=TRUE, sep=";")
# convert into POSIX format and account for time zone difference
PartZurich$date_time <- as.POSIXct(as.character(PartZurich$time), "%d.%m.%Y %H:%M", tz="UTC")
attributes(PartZurich$date_time)$tzone <- "Europe/Zurich"
# delete unnecessary columns
PartZurich <- subset(PartZurich, select=-c(time))
# merge the two data frames
raw.long3050 <- merge(raw.long3050, PartZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
# convert to num
raw.long3050$part_ZUE <- as.numeric(as.character(raw.long3050$part_ZUE)) # 526 NAs
raw.long3050$part_ZBW <- as.numeric(as.character(raw.long3050$part_ZBW)) # 18163 NAs
raw.long3050$part_ZSS <- as.numeric(as.character(raw.long3050$part_ZSS)) # 1537 NAs
raw.long3050$part_ZSW <- as.numeric(as.character(raw.long3050$part_ZSW)) # 35235 NAs
# remove PartZurich as it is merged into raw.long
rm(PartZurich)
### snow (2007-2012) --------
# resolution = 1 day
# load data
SnowZurich <- read.table("../data/meteoswiss/snowdaily.csv", header=TRUE, sep=";")
# string to data and bring into same format as raw.long
SnowZurich$date <- strptime(as.character(SnowZurich$time), "%Y%m%d")
# convert to POSIXct
SnowZurich$date <- as.POSIXct(SnowZurich$date)
# delete unnecessary columns
SnowZurich <- subset(SnowZurich, select=-c(time))
# merge the two data frames
raw.long3050 <- merge(raw.long3050, SnowZurich, by.x=c("date_"), by.y=c("date"), all.x=TRUE)
# convert to num
raw.long3050$snowrain <- as.numeric(as.character(raw.long3050$snowrain)) # 73/2174 = 1
raw.long3050$snowblanket <- as.numeric(as.character(raw.long3050$snowblanket))  # 254/2190 = 1
raw.long3050$snowfall <- as.numeric(as.character(raw.long3050$snowfall)) # 216/2176 = 1
# remove SnowZurich as it is merged into raw.long
rm(SnowZurich)
# there are emoty date/time rows, which we remove
# 28.03.2010, 30.03.2008 - for each of these days several removals (no other days concerned)
raw.long3050 <- raw.long3050[which(!is.na(raw.long3050$date_time)),]
head(raw.long3050)
# save raw.long --------
saveRDS(raw.long3050, file='../data/rawlong3050_check.RDS')
# loading and cleaning data files
# blank slate
rm(list = ls())
# set working directory %UPDATE%
setwd("BlindHaste/R") #Michael
# load packages
library(dplyr)
library(tidyr)
raw.wide <- read.table("../data/traffic/MasterRaw.csv", header=TRUE, sep=";")
raw.widecsv <- read.csv("../data/traffic/MasterRaw.csv", header=TRUE, sep=";", stringsAsFactors = FALSE)
str(raw.wide)
str(raw.widecsv)
raw.wide <- read.csv("../data/traffic/MasterRaw.csv", header=TRUE, sep=";", stringsAsFactors = FALSE)
raw.wide$date_2  <- paste(raw.wide[,"date"], raw.wide[,"time"], sep=".")
raw.wide$date_time <- strptime(as.character(raw.wide$date_2), "%d.%m.%Y.%H", tz="Europe/Zurich") # str -> "2008-08-26 00:00:00 CET"
raw.wide$date_time <- as.POSIXct(raw.wide$date_time) # convert into POSIXct
raw.wide <- subset(raw.wide, select=-c(date_2)) # date_2 not needed
raw.wide$date_ <- strptime(as.character(raw.wide$date), "%d.%m.%Y", tz="Europe/Zurich") # str -> "2008-08-26 00:00:00 CET"
raw.wide$date_ <- as.POSIXct(raw.wide$date_) # convert into POSIXct
raw.wide$year <- format(raw.wide$date_time, "%Y")
raw.wide$month <- format(raw.wide$date_time, "%b")
raw.wide$day <- format(raw.wide$date_time, "%wday")
raw.wide$day_num <- format(raw.wide$date_time, "%d")
testsum <-  raw.wide %>%
dplyr::select(date_, X15,X20,X25, X30, X35, X40, X45, X50, X55, X60, X61, X65, X70, X71, X75, X80, X85, X90, X91) %>%
dplyr::filter(date_ < '2009-08-24')
sum(as.matrix(testsum[2:dim(testsum)[2]]), na.rm = TRUE)
sum(is.na(raw.wide$X71)[raw.wide$maxspeed==30]) # many maxspeed=30 measures do not differentiate between 65,70,75 (e.g., Brunaustrasse_58)
raw.wide[raw.wide$maxspeed==30,]$X61 <-
rowSums(raw.wide[raw.wide$maxspeed==30,c("X65","X70","X71","X75")], na.rm=TRUE)
raw.wide[raw.wide$maxspeed==30,]$X65 <- NA
raw.wide[raw.wide$maxspeed==30,]$X70 <- NA
raw.wide[raw.wide$maxspeed==30,]$X71 <- NA
raw.wide[raw.wide$maxspeed==30,]$X75 <- NA
sum(!is.na(raw.wide$X25)[raw.wide$maxspeed==30])
raw.wide[raw.wide$maxspeed==30,]$X30 <-
rowSums(raw.wide[raw.wide$maxspeed==30,c("X15","X20","X25","X30")], na.rm=TRUE)
raw.wide[raw.wide$maxspeed==30,]$X15 <- NA
raw.wide[raw.wide$maxspeed==30,]$X20 <- NA
raw.wide[raw.wide$maxspeed==30,]$X25 <- NA
sum(is.na(raw.wide$X91)[raw.wide$maxspeed==50]) # important: to have more speed brackets, it might be better to exclude measures with X70=NA and X75=NA (if not dichotomizing)
raw.wide[raw.wide$maxspeed==50,]$X61 <-
rowSums(raw.wide[raw.wide$maxspeed==50,c("X65","X70","X75","X80","X85","X90","X91")], na.rm=TRUE)
# replace redundant information by NA
raw.wide[raw.wide$maxspeed==50,]$X65 <- NA
raw.wide[raw.wide$maxspeed==50,]$X70 <- NA
raw.wide[raw.wide$maxspeed==50,]$X75 <- NA
raw.wide[raw.wide$maxspeed==50,]$X80 <- NA
raw.wide[raw.wide$maxspeed==50,]$X85 <- NA
raw.wide[raw.wide$maxspeed==50,]$X90 <- NA
raw.wide[raw.wide$maxspeed==50,]$X91 <- NA
sum(!is.na(raw.wide$X30)[raw.wide$maxspeed==50]) # most maxspeed=50 measures differentiate between 30,35,40,45,50 - might be interesting for traffic jam issue
sum(!is.na(raw.wide$X20)[raw.wide$maxspeed==50]) # however, only few differentiate between 20,25,30
raw.wide[raw.wide$maxspeed==50,]$X50 <-
rowSums(raw.wide[raw.wide$maxspeed==50,c("X15","X20","X25","X30","X35","X40","X45","X50")], na.rm=TRUE)
# replace redundant information by NA
raw.wide[raw.wide$maxspeed==50,]$X15 <- NA
raw.wide[raw.wide$maxspeed==50,]$X20 <- NA
raw.wide[raw.wide$maxspeed==50,]$X25 <- NA
raw.wide[raw.wide$maxspeed==50,]$X30 <- NA
raw.wide[raw.wide$maxspeed==50,]$X35 <- NA
raw.wide[raw.wide$maxspeed==50,]$X40 <- NA
raw.wide[raw.wide$maxspeed==50,]$X45 <- NA
table(raw.wide$maxspeed) # only about two measurements for maxspeed=60!
raw.long <- gather(raw.wide, "bracket", value, c(4:22)) # 1027710
sum(is.na(raw.long$value)) # almost half of the rows are NAs (625997/ 1,020,794)
raw.long <- raw.long[!(is.na(raw.long$value)),] # 403974
colnames(raw.long)[names(raw.long) == 'bracket'] <- "speed"
colnames(raw.long)[names(raw.long) == 'value'] <- "freq"
raw.long$speed <- as.numeric(gsub("X","", as.character(raw.long$speed)))
raw.long3050 <- filter(raw.long, maxspeed == 30 | maxspeed == 50) #357204
raw.long3050$speed_dich <- 0
raw.long3050[raw.long3050$maxspeed == 30,]$speed_dich <- ifelse(raw.long3050[raw.long3050$maxspeed == 30,]$speed<=35,
raw.long3050[raw.long3050$maxspeed == 30,]$speed_dich<-"normal",
raw.long3050[raw.long3050$maxspeed == 30,]$speed_dich<-"speeding")
raw.long3050[raw.long3050$maxspeed == 50,]$speed_dich <- ifelse(raw.long3050[raw.long3050$maxspeed == 50,]$speed<=55,
raw.long3050[raw.long3050$maxspeed == 50,]$speed_dich<-"normal",
raw.long3050[raw.long3050$maxspeed == 50,]$speed_dich<-"speeding")
100/sum(raw.long3050$freq, na.rm=TRUE) * sum(raw.long3050[raw.long3050$speed_dich=="speeding",]$freq, na.rm=TRUE)
raw.long3050$speed_dich_acc <- 0
raw.long3050[raw.long3050$maxspeed == 30,]$speed_dich_acc <- ifelse(raw.long3050[raw.long3050$maxspeed == 30,]$speed<=30,
raw.long3050[raw.long3050$maxspeed == 30,]$speed_dich_acc<-"normal",
raw.long3050[raw.long3050$maxspeed == 30,]$speed_dich_acc<-"speeding")
raw.long3050[raw.long3050$maxspeed == 50,]$speed_dich_acc <- ifelse(raw.long3050[raw.long3050$maxspeed == 50,]$speed<=50,
raw.long3050[raw.long3050$maxspeed == 50,]$speed_dich_acc<-"normal",
raw.long3050[raw.long3050$maxspeed == 50,]$speed_dich_acc<-"speeding")
100/sum(raw.long3050$freq, na.rm=TRUE) * sum(raw.long3050[raw.long3050$speed_dich_acc=="speeding",]$freq, na.rm=TRUE)
raw.long3050$day <- as.character(raw.long3050$day)
raw.long3050$daytype <- 'weekday'
raw.long3050$daytype <- ifelse(raw.long3050$day=='0day' | raw.long3050$day=='6day' | raw.long3050$holiday==1, 'weekend_holiday', 'weekday')
raw.wide$cars_per_hour <- with(raw.wide, rowSums(cbind(X30,X35,X40,X45,X50,X55,X60,X65,X70,X71), na.rm = TRUE))
raw.long3050 <- raw.long3050[(raw.long3050$date_<="2009-08-24"),]
saveRDS(raw.wide, file=("../data/rawwide_check.RDS"))
saveRDS(raw.long, file=("../data/rawlong_check.RDS"))
saveRDS(raw.long3050, file=("../data/rawlong3050_check.RDS")) #233008
# Project Blind Haste
# Michael Schulte-Mecklenbeck, Emanuel de Bellis
# integrating external data files into processed rawdata
# blank slate
rm(list = ls())
# set working directory %UPDATE%
setwd("BlindHaste/R") #Michael
# load packages
library(dplyr)
library(tidyr)
# disable scientific notation (otherwise transformation of date into character and POSIX doesn't work?!)
#options(scipen=999)
# load data
raw.long3050 <- readRDS('../data/rawlong3050_check.RDS') # same as raw.wide but with one row per speed bracket (233008 rows)
raw.long3050$holiday <- 0
raw.long3050[raw.long3050$date_==as.POSIXct("2008-03-21"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2008-03-24"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2008-03-31"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2008-05-12"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2009-04-13"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2009-05-21"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2009-06-01"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2009-04-10"),]$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2010-05-24"),]$holiday <- 1
SunRainZurich <- read.table("../data/meteoswiss/sunshine.txt", header=TRUE, sep=",")
# Project Blind Haste
# Michael Schulte-Mecklenbeck, Emanuel de Bellis
# integrating external data files into processed rawdata
# blank slate
rm(list = ls())
# set working directory %UPDATE%
setwd("BlindHaste/R") #Michael
# load packages
library(dplyr)
library(tidyr)
# disable scientific notation (otherwise transformation of date into character and POSIX doesn't work?!)
#options(scipen=999)
# load data
raw.long3050 <- readRDS('../data/rawlong3050_check.RDS') # same as raw.wide but with one row per speed bracket (233008 rows)
# holidays 2008-2009 ----
head(raw.long3050)
which(raw.long3050$date_ == '2010-05-24')
which(raw.long3050$date_ == '2010-04-10')
which(raw.long3050$date_ == as.POSIXct("2009-04-10"))
which(raw.long3050$date_ == as.POSIXct("2009-05-24"))
raw.long3050[raw.long3050$date_==as.POSIXct("2010-05-24"),]
$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2009-04-10"),]
raw.long3050[raw.long3050$date_==as.POSIXct("2010-05-24"),]
raw.long3050$date_==as.POSIXct("2010-05-24")
raw.long3050[raw.long3050$date_==as.POSIXct("2010-05-24"),]
raw.long3050[raw.long3050$date_==as.POSIXct("2010-05-24"),]
$holiday <- 1
raw.long3050[raw.long3050$date_==as.POSIXct("2009-04-10"),]
raw.long3050[raw.long3050$date_==as.POSIXct("2010-05-24"),]
raw.long3050[raw.long3050$date_==as.POSIXct("2009-04-10"),]
raw.long3050[raw.long3050$date_==as.POSIXct("2010-05-24"),]
sum(raw.long3050$date_==as.POSIXct("2010-05-24"))
raw.long3050[raw.long3050$date_==as.POSIXct("2010-05-24"),]
as.POSIXct("2010-05-24")
as.POSIXct("2009-04-10")
SunRainZurich <- read.csv("../data/meteoswiss/sunshine.txt", header=TRUE, sep=",", stringsAsFactors = FALSE))
SunRainZurich <- read.csv("../data/meteoswiss/sunshine.txt", header=TRUE, sep=",", stringsAsFactors = FALSE)
SunRainZurich$date_time <- as.POSIXct(as.character(SunRainZurich$time), "%Y%m%d%H", tz="UTC")
attributes(SunRainZurich$date_time)$tzone <- "Europe/Zurich"
SunRainZurich <- subset(SunRainZurich, select=-c(time))
SunRainZurich <- dplyr::rename(SunRainZurich, sunshine = sonnenschein)
SunRainZurich <- dplyr::rename(SunRainZurich, precipitation = niederschlag)
SunRainZurich$sunshine <- as.numeric(as.character(SunRainZurich$sunshine))
SunRainZurich$precipitation <- as.numeric(as.character(SunRainZurich$precipitation))
raw.long3050 <- merge(raw.long3050, SunRainZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
rm(SunRainZurich)
BrightZurich <- read.csv("../data/meteoswiss/brightness_radiation.csv", header=TRUE, sep=";", stringsAsFactors = FALSE)
BrightZurich$date_time <- as.POSIXct(as.character(BrightZurich$time), "%Y%m%d%H", tz="UTC")
attributes(BrightZurich$date_time)$tzone <- "Europe/Zurich"
BrightZurich <- subset(BrightZurich, select=-c(time))
raw.long3050 <- merge(raw.long3050, BrightZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
raw.long3050$radiation <- as.numeric(as.character(raw.long3050$radiation))
raw.long3050$brightness_mv_sma <- as.numeric(as.character(raw.long3050$brightness_mv_sma))
raw.long3050$brightness_mv_klo <- as.numeric(as.character(raw.long3050$brightness_mv_klo))
raw.long3050$brightness_mv_smaklo <- as.numeric(as.character(raw.long3050$brightness_mv_smaklo))
raw.long3050$brightness_lx_sma <- 0
raw.long3050$brightness_lx_sma <- 10^(((raw.long3050$brightness_mv_sma)+245)/100)
raw.long3050$brightness_lx_klo <- 0
raw.long3050$brightness_lx_klo <- 10^(((raw.long3050$brightness_mv_klo)+245)/100)
raw.long3050$brightness_lx_smaklo <- 0
raw.long3050$brightness_lx_smaklo <- 10^(((raw.long3050$brightness_mv_smaklo)+245)/100)
raw.long3050$radiation <- raw.long3050$radiation+10
rm(BrightZurich)
AirTempZurich <- read.csv("../data/meteoswiss/pressure.txt", header=TRUE, sep=",", stringsAsFactors = FALSE)
AirTempZurich$date_time <- as.POSIXct(as.character(AirTempZurich$time), "%Y%m%d%H", tz="UTC")
attributes(AirTempZurich$date_time)$tzone <- "Europe/Zurich"
AirTempZurich <- subset(AirTempZurich, select=-c(time, tre200bn,tre200b0))
AirTempZurich <- rename(AirTempZurich,air_pressure=luftdruck)
raw.long3050 <- merge(raw.long3050, AirTempZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
raw.long3050$air_pressure <- as.numeric(as.character(raw.long3050$air_pressure))
raw.long3050$temp <- as.numeric(as.character(raw.long3050$temp))
rm(AirTempZurich)
VisZurich <- read.csv("../data/meteoswiss/visibility.csv", header=TRUE, sep=";", stringsAsFactors = FALSE)
VisZurich$date_time <- as.POSIXct(as.character(VisZurich$time), "%Y%m%d%H", tz="UTC")
attributes(VisZurich$date_time)$tzone <- "Europe/Zurich"
VisZurich <- subset(VisZurich, select=-c(time, eye_measure))
VisZurich <- VisZurich[!is.na(VisZurich$visibility),]
raw.long3050 <- merge(raw.long3050, VisZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
raw.long3050$visibility <- as.numeric(as.character(raw.long3050$visibility))
rm(VisZurich)
VariaZurich <- read.csv("../data/meteoswiss/varia2.csv", header=TRUE, sep=";", stringsAsFactors = FALSE)
VariaZurich$date_time <- as.POSIXct(as.character(VariaZurich$time), "%Y%m%d%H%M", tz="UTC")
attributes(VariaZurich$date_time)$tzone <- "Europe/Zurich"
VariaZurich <- VariaZurich[!is.na(VariaZurich$visibility_synop),]
VariaZurich <- subset(VariaZurich, select=-c(time))
names(VariaZurich)[names(VariaZurich)=="brightness_lx_sma"] <- "brightness_lx_sma_10min"
raw.long3050 <- merge(raw.long3050, VariaZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
raw.long3050$brightness_lx_sma_10min <- as.numeric(as.character(raw.long3050$brightness_lx_sma_10min))
raw.long3050$visibility_synop <- as.numeric(as.character(raw.long3050$visibility_synop))
raw.long3050$fog <- as.numeric(as.character(raw.long3050$fog))
raw.long3050$clouds <- as.numeric(as.character(raw.long3050$clouds))
rm(VariaZurich)
SunriseZurich <- read.csv("../data/sunrise_sunset/Zurich_2007-2012.csv", header=TRUE, sep=";", stringsAsFactors = FALSE)
SunriseZurich$sunrise_hour <- substr(SunriseZurich$sunrise_min,1,1)
SunriseZurich$sunset_hour <- substr(SunriseZurich$sunset_min,1,2)
SunriseZurich$sunrise_hour <- as.numeric(SunriseZurich$sunrise_hour)
SunriseZurich$sunset_hour <- as.numeric(SunriseZurich$sunset_hour)
SunriseZurich$date <- strptime(as.character(SunriseZurich$Date), "%d.%m.%Y")
SunriseZurich$date <- as.POSIXct(SunriseZurich$date)
SunriseZurich$DST <- as.POSIXlt(SunriseZurich$date)$isdst
SunriseZurich$sunrise <- 0
SunriseZurich$sunrise <- ifelse(SunriseZurich$DST==0, SunriseZurich$sunrise_hour, SunriseZurich$sunrise_hour + 1)
SunriseZurich$sunset <- 0
SunriseZurich$sunset <- ifelse(SunriseZurich$DST==0, SunriseZurich$sunset_hour, SunriseZurich$sunset_hour + 1)
SunriseZurich <- subset(SunriseZurich, select=-c(sunrise_min,sunset_min,sunrise_hour,sunset_hour,Date))
raw.long3050 <- merge(raw.long3050, SunriseZurich, by.x=c("date_"), by.y=c("date"), all.x=TRUE)
raw.long3050$day_night <- 0
raw.long3050$day_night <- ifelse(((raw.long3050$time>=raw.long3050$sunrise) & (raw.long3050$time<=raw.long3050$sunset)), 1, 0)
raw.long3050$day_night2 <- 0
raw.long3050$day_night2 <- ifelse(((raw.long3050$time>raw.long3050$sunrise) & (raw.long3050$time<raw.long3050$sunset)), 1, 0)
rm(SunriseZurich)
PartZurich <- read.table("../data/particulates/particulates_hourly.csv", header=TRUE, sep=";")
PartZurich <- read.csv("../data/particulates/particulates_hourly.csv", header=TRUE, sep=";", stringsAsFactors = FALSE)
PartZurich$date_time <- as.POSIXct(as.character(PartZurich$time), "%d.%m.%Y %H:%M", tz="UTC")
attributes(PartZurich$date_time)$tzone <- "Europe/Zurich"
PartZurich <- subset(PartZurich, select=-c(time))
raw.long3050 <- merge(raw.long3050, PartZurich, by.x=c("date_time"), by.y=c("date_time"), all.x=TRUE)
raw.long3050$part_ZUE <- as.numeric(as.character(raw.long3050$part_ZUE)) # 526 NAs
raw.long3050$part_ZBW <- as.numeric(as.character(raw.long3050$part_ZBW)) # 18163 NAs
raw.long3050$part_ZSS <- as.numeric(as.character(raw.long3050$part_ZSS)) # 1537 NAs
raw.long3050$part_ZSW <- as.numeric(as.character(raw.long3050$part_ZSW)) # 35235 NAs
rm(PartZurich)
SnowZurich <- read.csv("../data/meteoswiss/snowdaily.csv", header=TRUE, sep=";", stringsAsFactors = FALSE)
SnowZurich$date <- strptime(as.character(SnowZurich$time), "%Y%m%d")
SnowZurich$date <- as.POSIXct(SnowZurich$date)
SnowZurich <- subset(SnowZurich, select=-c(time))
raw.long3050 <- merge(raw.long3050, SnowZurich, by.x=c("date_"), by.y=c("date"), all.x=TRUE)
raw.long3050$snowrain <- as.numeric(as.character(raw.long3050$snowrain)) # 73/2174 = 1
raw.long3050$snowblanket <- as.numeric(as.character(raw.long3050$snowblanket))  # 254/2190 = 1
raw.long3050$snowfall <- as.numeric(as.character(raw.long3050$snowfall)) # 216/2176 = 1
rm(SnowZurich)
raw.long3050 <- raw.long3050[which(!is.na(raw.long3050$date_time)),]
head(raw.long3050)
saveRDS(raw.long3050, file='../data/rawlong3050_check.RDS')
